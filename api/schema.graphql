# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
  email: String!
  isEmailConfirmed: Boolean!
  nickname: String
  lastHeartbeatAt: Timestamp
  lastLoginAt: Timestamp
  lastLoginIP: String
  createdIP: String!
  createdAt: Timestamp!
  updatedAt: Timestamp
  userTokens: [BaseUserToken!]
  providers: [BaseUserProvider!]
  permissions: [BaseUserPermission!]
  roles: [BaseUserRole!]
  fileUploads: [BaseFileUpload!]
  orders: [BaseOrder!]
  artistBio: BaseArtistBio
  isAdmin: Boolean!
  isActive: Boolean!
  name: String
  permissionsList: [String!]!
  rolesList: [String!]!
  gravatar(size: Int): String!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type BaseUserToken {
  id: ID!
  type: UserTokenType!
  expiresAt: Timestamp!
  createdAt: Timestamp!
  userId: String!
  user: BaseUser
}

enum UserTokenType {
  emailConfirmation
  forgotPassword
}

type BaseUser {
  id: ID!
  email: String!
  isEmailConfirmed: Boolean!
  nickname: String
  lastHeartbeatAt: Timestamp
  lastLoginAt: Timestamp
  lastLoginIP: String
  createdIP: String!
  createdAt: Timestamp!
  updatedAt: Timestamp
  userTokens: [BaseUserToken!]
  providers: [BaseUserProvider!]
  permissions: [BaseUserPermission!]
  roles: [BaseUserRole!]
  fileUploads: [BaseFileUpload!]
  orders: [BaseOrder!]
  artistBio: BaseArtistBio
}

type BaseUserProvider {
  userId: String!
  user: BaseUser
  createdAt: Timestamp!
}

type BaseUserPermission {
  permissionId: Int!
  userId: String!
  createdAt: Timestamp!
  roleId: Int
  permission: BasePermission
  role: BaseRole
  user: BaseUser
}

type BasePermission {
  id: ID!
  name: String!
  rolePermissions: [BaseRolePermission!]
  userPermissions: [BaseUserPermission!]
}

type BaseRolePermission {
  permissionId: Int!
  roleId: Int!
  createdAt: Timestamp!
  permission: BasePermission
  role: BaseRole
}

type BaseRole {
  id: ID!
  name: String!
  rolePermissions: [BaseRolePermission!]
  userPermissions: [BaseUserPermission!]
  userRole: [BaseUserRole!]
}

type BaseUserRole {
  roleId: Int!
  userId: String!
  createdAt: Timestamp!
  role: BaseRole
  user: BaseUser
}

type BaseFileUpload {
  id: ID!
  path: String!
  originalName: String!
  createdAt: Timestamp!
  updatedAt: Timestamp
  status: FileUploadStatus!
  userId: String!
  user: BaseUser
}

enum FileUploadStatus {
  pending
  finalized
}

type BaseOrder {
  id: ID!
  status: OrderStatus!
  printId: String!
  print: BasePrint
  userId: String!
  user: BaseUser
}

enum OrderStatus {
  pending
}

type BasePrint {
  id: ID!
  slug: String!
  title: String!
  description: String!
  url: String!
  status: PrintStatus!
  orders: [BaseOrder!]
}

enum PrintStatus {
  unavailable
  available
}

type BaseArtistBio {
  id: ID!
  socials: JSON
  userId: String!
  user: BaseUser
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type LoginResponse {
  accessToken: String!
  user: User!
  accessTokenExpiresAt: Timestamp!
  refreshTokenExpiresAt: Timestamp
}

type FileUpload {
  id: ID!
  path: String!
  originalName: String!
  createdAt: Timestamp!
  updatedAt: Timestamp
  status: FileUploadStatus!
  userId: String!
  user: User
  url: String!
}

type PresignedUrl {
  url: String!
  fields: JSON!
}

type UserPaginatorResponse {
  cursorId: String
  data: [User!]!
}

type Print {
  id: ID!
  slug: String!
  title: String!
  description: String!
  url: String!
  status: PrintStatus!
  orders: [BaseOrder!]
}

type Query {
  listArtists: [User!]!
  fileUpload(id: String!): FileUpload!
  fileUploads(input: ListFileUploadsInput!): [FileUpload!]!
  listPrintsAvailable: [Print!]!
  me: User!
  userById(id: String!): User!
  userByEmail(email: String!): User!
  users(input: UserPaginatorInput!): UserPaginatorResponse!
}

input ListFileUploadsInput {
  userId: String!
}

input UserPaginatorInput {
  skip: Int
  take: Int = 3
  cursorId: String
}

type Mutation {
  login(input: LoginInput!): LoginResponse!
  refreshAccessToken: LoginResponse!
  logout: Boolean
  revokeRefreshToken(userId: String!): Boolean
  presignedUrl(input: PresignedUrlInput!): PresignedUrl!
  verifyEmailConfirmation(input: VerifyEmailInput!): LoginResponse!
  validateForgotPasswordToken(input: ValidateForgotPasswordTokenInput!): Boolean!
  sendForgotPasswordEmail(input: SendForgotPasswordInput!): Boolean!
  updatePasswordFromToken(input: UpdatePasswordFromTokenInput!): LoginResponse!
  register(input: RegisterInput!): User!
  resendConfirmEmail(email: String!): Boolean!
  updatePassword(input: UpdatePasswordInput!): Boolean!
}

input LoginInput {
  email: String!
  password: String!
  rememberMe: Boolean
}

input PresignedUrlInput {
  fileName: String!
  mimeType: String!
  type: String!
}

input VerifyEmailInput {
  email: String!
  token: String!
}

input ValidateForgotPasswordTokenInput {
  email: String!
  token: String!
}

input SendForgotPasswordInput {
  email: String!
}

input UpdatePasswordFromTokenInput {
  password: String!
  token: String!
  email: String!
}

input RegisterInput {
  id: String
  password: String
  nickname: String
  email: String!
}

input UpdatePasswordInput {
  userId: String!
  currentPassword: String!
  password: String!
  revokeToken: Boolean
}