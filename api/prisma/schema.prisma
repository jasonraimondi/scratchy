datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
  output = "./generated/client"
}

//generator zod {
//  provider = "zod-prisma"
//}

model User {
  id               String           @id @default(uuid()) @db.Uuid
  email            String           @unique @db.VarChar(255)
  passwordHash     String?          @db.VarChar(255)
  tokenVersion     Int              @default(0)
  isEmailConfirmed Boolean          @default(false)
  nickname         String?          @db.VarChar(255)
  roles            String[]         @default([])
  lastHeartbeatAt  DateTime?        @db.Timestamp(6)
  lastLoginAt      DateTime?        @db.Timestamp(6)
  lastLoginIP      String?          @db.Inet
  createdIP        String           @db.Inet
  createdAt        DateTime         @default(now()) @db.Timestamp(6)
  updatedAt        DateTime?        @updatedAt
  userTokens       UserToken[]
  providers        UserProvider[]
  permissions      UserPermission[]
  fileUploads      FileUpload[]
  orders           Order[]
  artistBio        ArtistBio?
  UserRole         UserRole[]

  @@index([email])
}

enum Provider {
  facebook
  github
  google
}

model UserProvider {
  provider   Provider
  providerId String   @db.VarChar(255)
  userId     String   @db.Uuid
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now()) @db.Timestamp(6)

  @@id([provider, providerId])
  @@unique([provider, userId])
  @@index([userId])
}

enum UserTokenType {
  emailConfirmation
  forgotPassword
}

model UserToken {
  id        String        @id @default(uuid()) @db.Uuid
  type      UserTokenType
  expiresAt DateTime      @db.Timestamp(6)
  createdAt DateTime      @default(now()) @db.Timestamp(6)
  userId    String        @db.Uuid
  user      User          @relation(fields: [userId], references: [id])

  @@unique([userId, type])
  @@index([userId])
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String           @unique @db.VarChar
  rolePermissions RolePermission[]
  userPermissions UserPermission[]
  userRole        UserRole[]
}

model Permission {
  id              Int              @id @default(autoincrement())
  name            String           @unique @db.VarChar
  rolePermissions RolePermission[]
  userPermissions UserPermission[]
}

model RolePermission {
  permissionId Int
  roleId       Int
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
}

model UserPermission {
  permissionId Int
  userId       String     @db.Uuid
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  roleId       Int?
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role?      @relation(fields: [roleId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@id([userId, permissionId])
}

model UserRole {
  roleId    Int
  userId    String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamp(6)
  role      Role     @relation(fields: [roleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, roleId])
}

enum FileUploadStatus {
  pending
  finalized
}

model FileUpload {
  id           String           @id @default(uuid()) @db.Uuid
  path         String           @db.VarChar(255)
  originalName String           @db.VarChar(255)
  createdAt    DateTime         @default(now()) @db.Timestamp(6)
  updatedAt    DateTime?        @updatedAt
  status       FileUploadStatus @default(value: pending)
  userId       String           @db.Uuid
  user         User             @relation(fields: [userId], references: [id])

  @@index(userId)
}

enum PrintStatus {
  unavailable
  available
}

model Print {
  id          String      @id @default(uuid()) @db.Uuid
  slug        String
  title       String
  description String
  url         String
  status      PrintStatus @default(value: unavailable)
  createdAt   DateTime    @default(now()) @db.Timestamp(6)
  updatedAt   DateTime?   @updatedAt
  orders      Order[]

  @@index(slug)
}

enum OrderStatus {
  pending
}

model Order {
  id        String      @id @default(uuid()) @db.Uuid
  status    OrderStatus @default(value: pending)
  createdAt DateTime    @default(now()) @db.Timestamp(6)
  updatedAt DateTime?   @updatedAt
  printId   String      @db.Uuid
  print     Print       @relation(fields: [printId], references: [id])
  userId    String      @db.Uuid
  user      User        @relation(fields: [userId], references: [id])

  @@index(printId)
  @@index(userId)
}

model ArtistBio {
  id        String    @id @default(uuid()) @db.Uuid
  socials   Json?
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime? @updatedAt
  userId    String    @unique @db.Uuid
  user      User      @relation(fields: [userId], references: [id])

  @@index(userId)
}
